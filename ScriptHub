if not LPH_OBFUSCATED then
    LPH_JIT_MAX = function(...) return ... end
end

-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local Workspace = workspace
local Lighting = cloneref(game:GetService("Lighting"))

-- Character
local character = Workspace.Const.Ignore.LocalCharacter
local top = character.Top
local middle = character.Middle
local bottom = character.Bottom
local prism = top.Prism1

-- Store the original position of the neck part
local originalPrismCFrame = prism.CFrame

-- Variables
local longNeckEnabled = false
local collisionToggle = false
local ClosestATV = nil
local speed = 55
local travel = Vector3.zero
local Enabled = false
local atvbypass = true

local MIN_SPEED = 1
local MAX_SPEED = 150
local previousSpeed = speed
local isSpeedToggled = false

local timechangerEnabled = true
local time = 12

sethiddenproperty(workspace.Terrain, "Decoration", not bool)

loadstring(game:HttpGet("https://raw.githubusercontent.com/Bonk-ux/BonkAim/refs/heads/main/BA"))()

-- ATV Look Restriction Bypass
local trident = { gc = { camera = nil } }
LPH_JIT_MAX(function()
    for _, v in pairs(getgc(true)) do
        if type(v) == "table" and type(rawget(v, "SetMaxRelativeLookExtentsY")) == "function" then
            trident.gc.camera = v
        end
    end
end)()

task.spawn(function()
    while task.wait() do
        if trident.gc.camera then
            trident.gc.camera.SetMaxRelativeLookExtentsY(10000)
        end
    end
end)

-- ATV Collision Toggle / Noclip (F Key)
local function toggleATVCollision()
    if not ClosestATV then return end
    collisionToggle = not collisionToggle
    for _, part in ipairs(ClosestATV:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = collisionToggle
        end
    end
end

local function clampSpeed(value, min, max)
    return math.max(min, math.min(max, value))
end

local function adjustSpeed(amount)
    speed = clampSpeed(speed + amount, MIN_SPEED, MAX_SPEED)
end

local function toggleSpeed()
    if isSpeedToggled then
        speed = previousSpeed
    else
        previousSpeed = speed
        speed = 28
    end
    isSpeedToggled = not isSpeedToggled
end

-- Toggle Long Neck (L Key)
local function toggleLongNeck()
    longNeckEnabled = not longNeckEnabled
    top.Prism1.CFrame = longNeckEnabled and originalPrismCFrame - Vector3.yAxis * 7 or originalPrismCFrame
end

-- ATV Detection
local function GetClosestATV()
    local closestATV, closestDistance = nil, math.huge

    for _, v in ipairs(Workspace:GetChildren()) do
        if v:FindFirstChild("Seat") and v:FindFirstChild("Plastics") then
            local distance = (v.Plastics.Position - middle.Position).Magnitude
            if distance < closestDistance then
                closestATV = v
                closestDistance = distance
            end
        end
    end

    return closestATV
end

-- ATV Fly (Z Key)
local function FlyHack()
    RunService.RenderStepped:Connect(function()
        ClosestATV = GetClosestATV()

        if Enabled and ClosestATV then
            local plastics = ClosestATV.Plastics
            plastics.Velocity = Vector3.zero

            local flip2 = ClosestATV.Frame:FindFirstChild("Flip2")
            if not flip2 then
                local newFlip = ClosestATV.Frame.Flip:Clone()
                newFlip.Name = "Flip2"
                newFlip.Enabled = true
                newFlip.Parent = ClosestATV.Frame
            else
                flip2.Enabled = true
            end

            if travel.Magnitude > 0 then
                plastics.Anchored = false
                plastics.Velocity = travel.Unit * speed
            else
                plastics.Velocity = Vector3.zero
                plastics.Anchored = false
            end
        else
            local flip2 = ClosestATV and ClosestATV.Frame:FindFirstChild("Flip2")
            if flip2 then
                flip2.Enabled = false
            end
        end
    end)
end

-- Flip Bypass (Auto)
RunService.RenderStepped:Connect(function()
    for _, v in ipairs(Workspace:GetChildren()) do
        local frame = v:FindFirstChild("Frame")
        if frame then
            local flip = frame:FindFirstChild("Flip")
            if flip and atvbypass then
                flip.Enabled = true
                flip.RigidityEnabled = true
                flip.Responsiveness = math.huge
            end
        end
    end
end)

-- Keybinds
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if isProcessed then return end

    if input.KeyCode == Enum.KeyCode.L then
        toggleLongNeck()
    elseif input.KeyCode == Enum.KeyCode.F then
        toggleATVCollision()
    elseif input.KeyCode == Enum.KeyCode.Z then
        Enabled = not Enabled
    elseif input.KeyCode == Enum.KeyCode.Q then
        toggleSpeed()
    elseif input.KeyCode == Enum.KeyCode.V then
        adjustSpeed(5)
    elseif input.KeyCode == Enum.KeyCode.N then
        adjustSpeed(-5)
    end
end)

-- Movement for ATV Fly
RunService.RenderStepped:Connect(function()
    if Enabled and ClosestATV then
        local cameraCFrame = Camera.CFrame
        travel = Vector3.zero

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then travel += cameraCFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then travel -= cameraCFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then travel += cameraCFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then travel -= cameraCFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.X) then travel += cameraCFrame.UpVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then travel -= cameraCFrame.UpVector end
    else
        travel = Vector3.zero
    end
end)

FlyHack()

-- Hitbox Expander (Auto)
local hitboxSize = 10
local cancollide = false

local function updateHitbox(character)
    local head = character:FindFirstChild("Head")
    if head then
        head.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
        head.Transparency = 0.5
        head.CanCollide = cancollide
    end
end

for _, obj in pairs(Workspace:GetChildren()) do
    if obj:IsA("Model") and obj:FindFirstChild("Head") then
        updateHitbox(obj)
    end
end

Workspace.ChildAdded:Connect(function(obj)
    if obj:IsA("Model") and obj:FindFirstChild("Head") then
        updateHitbox(obj)
    end
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(updateHitbox)
end)

RunService.Heartbeat:Connect(function()
    if timechangerEnabled then
        Lighting.ClockTime = time
    end
end)
